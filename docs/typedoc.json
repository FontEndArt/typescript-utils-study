{
	"id": 0,
	"name": "My TypeScript Documentation - v1.0.0",
	"kind": 1,
	"flags": {},
	"originalName": "My TypeScript Documentation",
	"children": [
		{
			"id": 4,
			"name": "react",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 303,
					"name": "ReactExample",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "react/Example.tsx",
							"line": 15,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 304,
							"name": "ReactExample",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "ReactExample",
								"returns": "example\n",
								"tags": [
									{
										"tag": "description",
										"text": "A simple example of a React component\n```Typescript\nimport { ReactExample } from 'xxx'\nconst Example = () => {\n    return <ReactExample />\n}\nexport default Example\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"qualifiedName": "React.ReactNode",
								"package": ".pnpm",
								"name": "ReactNode"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						303
					]
				}
			],
			"sources": [
				{
					"fileName": "react/index.ts",
					"line": 3,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "types",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 150,
					"name": "Res",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 152,
							"name": "Failure",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "types/LargerThan.ts",
									"line": 25,
									"character": 2
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 153,
							"name": "Tie",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "types/LargerThan.ts",
									"line": 26,
									"character": 2
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 151,
							"name": "Victory",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "types/LargerThan.ts",
									"line": 24,
									"character": 2
								}
							],
							"defaultValue": "0"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								152,
								153,
								151
							]
						}
					],
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 23,
							"character": 18
						}
					]
				},
				{
					"id": 154,
					"name": "NumberObject",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 157,
							"name": "fractional",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types/LargerThan.ts",
									"line": 32,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 160,
								"name": "F"
							}
						},
						{
							"id": 156,
							"name": "integer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types/LargerThan.ts",
									"line": 31,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 159,
								"name": "I"
							}
						},
						{
							"id": 155,
							"name": "symbol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types/LargerThan.ts",
									"line": 30,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 158,
								"name": "S"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								157,
								156,
								155
							]
						}
					],
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 29,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 158,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 149,
								"name": "NSymbol"
							}
						},
						{
							"id": 159,
							"name": "I",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 160,
							"name": "F",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				},
				{
					"id": 229,
					"name": "Add",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Add"
							},
							{
								"tag": "description",
								"text": "请实现Add<A, B>计算正整数之和。"
							},
							{
								"tag": "example",
								"text": "type A = Add<1, 2> // 3"
							},
							{
								"tag": "example",
								"text": "type B = Add<0, 0> // 0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Add.ts",
							"line": 16,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 230,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 231,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "literal",
							"value": "length"
						},
						"objectType": {
							"type": "tuple",
							"elements": [
								{
									"type": "rest",
									"elementType": {
										"type": "reference",
										"id": 226,
										"typeArguments": [
											{
												"type": "reference",
												"id": 230,
												"name": "A"
											}
										],
										"name": "NumberToTupleLength"
									}
								},
								{
									"type": "rest",
									"elementType": {
										"type": "reference",
										"id": 226,
										"typeArguments": [
											{
												"type": "reference",
												"id": 231,
												"name": "B"
											}
										],
										"name": "NumberToTupleLength"
									}
								}
							]
						}
					}
				},
				{
					"id": 176,
					"name": "CreateNumberObject",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 61,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 177,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 178,
							"name": "N",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "reference",
								"id": 161,
								"typeArguments": [
									{
										"type": "reference",
										"id": 177,
										"name": "T"
									}
								],
								"name": "IsNegative"
							}
						},
						{
							"id": 179,
							"name": "F",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "reference",
								"id": 163,
								"typeArguments": [
									{
										"type": "reference",
										"id": 177,
										"name": "T"
									}
								],
								"name": "IsFractional"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 178,
							"name": "N"
						},
						"extendsType": {
							"type": "literal",
							"value": true
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 179,
								"name": "F"
							},
							"extendsType": {
								"type": "literal",
								"value": true
							},
							"trueType": {
								"type": "reference",
								"id": 168,
								"typeArguments": [
									{
										"type": "reference",
										"id": 177,
										"name": "T"
									}
								],
								"name": "NumberObjectByNF"
							},
							"falseType": {
								"type": "reference",
								"id": 172,
								"typeArguments": [
									{
										"type": "reference",
										"id": 177,
										"name": "T"
									}
								],
								"name": "NumberObjectByN"
							}
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 179,
								"name": "F"
							},
							"extendsType": {
								"type": "literal",
								"value": true
							},
							"trueType": {
								"type": "reference",
								"id": 170,
								"typeArguments": [
									{
										"type": "reference",
										"id": 177,
										"name": "T"
									}
								],
								"name": "NumberObjectByPF"
							},
							"falseType": {
								"type": "reference",
								"id": 174,
								"typeArguments": [
									{
										"type": "reference",
										"id": 177,
										"name": "T"
									}
								],
								"name": "NumberObjectByP"
							}
						}
					}
				},
				{
					"id": 296,
					"name": "Divide",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Divide"
							},
							{
								"tag": "description",
								"text": "Implement Divide<A, B> Math.floow(A/B)"
							},
							{
								"tag": "description",
								"text": "只需要考虑非负整数。"
							},
							{
								"tag": "example",
								"text": "type A = Divide<1, 0> // never"
							},
							{
								"tag": "example",
								"text": "type B = Divide<4, 2> // 2"
							},
							{
								"tag": "example",
								"text": "type C = Divide<10, 3> // 3"
							},
							{
								"tag": "example",
								"text": "type D = Divide<3, 3> // 1"
							},
							{
								"tag": "example",
								"text": "type E = Divide<3, 4> // 0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Divide.ts",
							"line": 29,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 297,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 298,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 297,
							"name": "A"
						},
						"extendsType": {
							"type": "literal",
							"value": 0
						},
						"trueType": {
							"type": "literal",
							"value": 0
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 298,
								"name": "B"
							},
							"extendsType": {
								"type": "literal",
								"value": 0
							},
							"trueType": {
								"type": "intrinsic",
								"name": "never"
							},
							"falseType": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"id": 216,
									"typeArguments": [
										{
											"type": "reference",
											"id": 297,
											"name": "A"
										},
										{
											"type": "reference",
											"id": 298,
											"name": "B"
										}
									],
									"name": "LargerThan2"
								},
								"extendsType": {
									"type": "literal",
									"value": false
								},
								"trueType": {
									"type": "literal",
									"value": 0
								},
								"falseType": {
									"type": "conditional",
									"checkType": {
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 297,
												"name": "A"
											}
										]
									},
									"extendsType": {
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 298,
												"name": "B"
											}
										]
									},
									"trueType": {
										"type": "literal",
										"value": 1
									},
									"falseType": {
										"type": "reference",
										"id": 292,
										"typeArguments": [
											{
												"type": "reference",
												"id": 297,
												"name": "A"
											},
											{
												"type": "reference",
												"id": 298,
												"name": "B"
											}
										],
										"name": "DivideHelper"
									}
								}
							}
						}
					}
				},
				{
					"id": 292,
					"name": "DivideHelper",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "DivideHelper"
							},
							{
								"tag": "description",
								"text": "Divide 的辅助type，A.length肯定比B.length大\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Divide.ts",
							"line": 9,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 293,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 294,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 295,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "literal",
							"value": 0
						},
						"extendsType": {
							"type": "reference",
							"id": 293,
							"name": "A"
						},
						"trueType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 295,
								"name": "C"
							}
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 216,
								"typeArguments": [
									{
										"type": "reference",
										"id": 293,
										"name": "A"
									},
									{
										"type": "reference",
										"id": 294,
										"name": "B"
									}
								],
								"name": "LargerThan2"
							},
							"extendsType": {
								"type": "literal",
								"value": true
							},
							"trueType": {
								"type": "reference",
								"id": 292,
								"typeArguments": [
									{
										"type": "reference",
										"id": 278,
										"typeArguments": [
											{
												"type": "reference",
												"id": 293,
												"name": "A"
											},
											{
												"type": "reference",
												"id": 294,
												"name": "B"
											}
										],
										"name": "SubtractHelper1"
									},
									{
										"type": "reference",
										"id": 294,
										"name": "B"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "rest",
												"elementType": {
													"type": "reference",
													"id": 295,
													"name": "C"
												}
											},
											{
												"type": "literal",
												"value": 1
											}
										]
									}
								],
								"name": "DivideHelper"
							},
							"falseType": {
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "length"
								},
								"objectType": {
									"type": "reference",
									"id": 295,
									"name": "C"
								}
							}
						}
					}
				},
				{
					"id": 247,
					"name": "Equal",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Equal"
							},
							{
								"tag": "description",
								"text": "Implement Equal<A, B> to check if two types are identical."
							},
							{
								"tag": "example",
								"text": "type a = Equal<any, any> // true"
							},
							{
								"tag": "example",
								"text": "type b = Equal<any, 1> // false"
							},
							{
								"tag": "example",
								"text": "type c = Equal<never, never> // true"
							},
							{
								"tag": "example",
								"text": "type d = Equal<'BFE', 'BFE'> // true"
							},
							{
								"tag": "example",
								"text": "type e = Equal<'BFE', string> // false"
							},
							{
								"tag": "example",
								"text": "type f = Equal<1 | 2, 2 | 1> // true"
							},
							{
								"tag": "example",
								"text": "type g = Equal<{a : number}, {a: number}> // true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Equal.ts",
							"line": 14,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 248,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 249,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "literal",
							"value": true
						},
						"extendsType": {
							"type": "reference",
							"id": 119,
							"typeArguments": [
								{
									"type": "reference",
									"id": 248,
									"name": "A"
								}
							],
							"name": "IsAny1"
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "literal",
								"value": true
							},
							"extendsType": {
								"type": "reference",
								"id": 119,
								"typeArguments": [
									{
										"type": "reference",
										"id": 249,
										"name": "B"
									}
								],
								"name": "IsAny1"
							},
							"trueType": {
								"type": "literal",
								"value": true
							},
							"falseType": {
								"type": "literal",
								"value": false
							}
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "literal",
								"value": true
							},
							"extendsType": {
								"type": "reference",
								"id": 119,
								"typeArguments": [
									{
										"type": "reference",
										"id": 249,
										"name": "B"
									}
								],
								"name": "IsAny1"
							},
							"trueType": {
								"type": "literal",
								"value": false
							},
							"falseType": {
								"type": "conditional",
								"checkType": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"id": 248,
											"name": "A"
										}
									]
								},
								"extendsType": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"id": 249,
											"name": "B"
										}
									]
								},
								"trueType": {
									"type": "conditional",
									"checkType": {
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 249,
												"name": "B"
											}
										]
									},
									"extendsType": {
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 248,
												"name": "A"
											}
										]
									},
									"trueType": {
										"type": "literal",
										"value": true
									},
									"falseType": {
										"type": "literal",
										"value": false
									}
								},
								"falseType": {
									"type": "literal",
									"value": false
								}
							}
						}
					}
				},
				{
					"id": 141,
					"name": "Filter",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Filter"
							},
							{
								"tag": "description",
								"text": "请实现Filter<T, A>，返回T中能够assign给A的type所组成的新tuple。"
							},
							{
								"tag": "example",
								"text": "type A = Filter<[1, 'BFE', 2, true, 'dev'], number> // [1, 2]"
							},
							{
								"tag": "example",
								"text": "type B = Filter<[1, 'BFE', 2, true, 'dev'], string> // ['BFE', 'dev']"
							},
							{
								"tag": "example",
								"text": "type C = Filter<[1, 'BFE', 2, true, 'dev'], null> // []"
							},
							{
								"tag": "example",
								"text": "type D = Filter<[1, 'BFE', 2, any, 'dev'], string> // ['BFE', any, 'dev']"
							},
							{
								"tag": "example",
								"text": "type E = Filter<[1, 'BFE', 2, any, 'dev'], number> // [1, 2, any]\n> 将持续关注[L]-extends-[A]和L-extends-A的区别是啥\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Filter.ts",
							"line": 11,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 142,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 143,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 144,
							"name": "TT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 142,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "inferred",
									"name": "L"
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "reference",
							"id": 141,
							"typeArguments": [
								{
									"type": "reference",
									"name": "R"
								},
								{
									"type": "reference",
									"id": 143,
									"name": "A"
								},
								{
									"type": "conditional",
									"checkType": {
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"name": "L"
											}
										]
									},
									"extendsType": {
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 143,
												"name": "A"
											}
										]
									},
									"trueType": {
										"type": "tuple",
										"elements": [
											{
												"type": "rest",
												"elementType": {
													"type": "reference",
													"id": 144,
													"name": "TT"
												}
											},
											{
												"type": "reference",
												"name": "L"
											}
										]
									},
									"falseType": {
										"type": "reference",
										"id": 144,
										"name": "TT"
									}
								}
							],
							"name": "Filter"
						},
						"falseType": {
							"type": "reference",
							"id": 144,
							"name": "TT"
						}
					}
				},
				{
					"id": 243,
					"name": "FindIndex",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "FindIndex"
							},
							{
								"tag": "description",
								"text": "正如Array.prototype.findIndex()， 请实现FindIndex<T, E>。"
							},
							{
								"tag": "example",
								"text": "type A = [any, never, 1, '2', true]"
							},
							{
								"tag": "example",
								"text": "type B = FindIndex<A, 1> // 2"
							},
							{
								"tag": "example",
								"text": "type C = FindIndex<A, 3> // never\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/FindIndex.ts",
							"line": 9,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 244,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 245,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 246,
							"name": "TT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 244,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "inferred",
									"name": "L"
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "tuple",
								"elements": [
									{
										"type": "reference",
										"id": 245,
										"name": "E"
									}
								]
							},
							"extendsType": {
								"type": "tuple",
								"elements": [
									{
										"type": "reference",
										"name": "L"
									}
								]
							},
							"trueType": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"id": 119,
									"typeArguments": [
										{
											"type": "reference",
											"name": "L"
										}
									],
									"name": "IsAny1"
								},
								"extendsType": {
									"type": "reference",
									"id": 119,
									"typeArguments": [
										{
											"type": "reference",
											"id": 245,
											"name": "E"
										}
									],
									"name": "IsAny1"
								},
								"trueType": {
									"type": "indexedAccess",
									"indexType": {
										"type": "literal",
										"value": "length"
									},
									"objectType": {
										"type": "reference",
										"id": 246,
										"name": "TT"
									}
								},
								"falseType": {
									"type": "reference",
									"id": 243,
									"typeArguments": [
										{
											"type": "reference",
											"name": "R"
										},
										{
											"type": "reference",
											"id": 245,
											"name": "E"
										},
										{
											"type": "tuple",
											"elements": [
												{
													"type": "rest",
													"elementType": {
														"type": "reference",
														"id": 246,
														"name": "TT"
													}
												},
												{
													"type": "literal",
													"value": 1
												}
											]
										}
									],
									"name": "FindIndex"
								}
							},
							"falseType": {
								"type": "reference",
								"id": 243,
								"typeArguments": [
									{
										"type": "reference",
										"name": "R"
									},
									{
										"type": "reference",
										"id": 245,
										"name": "E"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "rest",
												"elementType": {
													"type": "reference",
													"id": 246,
													"name": "TT"
												}
											},
											{
												"type": "literal",
												"value": 1
											}
										]
									}
								],
								"name": "FindIndex"
							}
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 74,
					"name": "FirstChar",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/FirstChar.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 75,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 75,
							"name": "T"
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "inferred",
										"name": "P"
									},
									""
								],
								[
									{
										"type": "intrinsic",
										"name": "any"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "reference",
							"name": "P"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 86,
					"name": "FirstItem",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "FirstItem"
							},
							{
								"tag": "description",
								"text": "和FirstChar<T>类似，实现FirstItem<T>来返回tuple type的第一个type。"
							},
							{
								"tag": "example",
								"text": "FirstItem<[string, number, boolean]> // string"
							},
							{
								"tag": "example",
								"text": "FirstItem<['B', 'F', 'E']>  // 'B'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/FirstItem.ts",
							"line": 7,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 87,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 87,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "inferred",
									"name": "F"
								},
								{
									"type": "rest",
									"elementType": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						"trueType": {
							"type": "reference",
							"name": "F"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 105,
					"name": "Flat",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Flat"
							},
							{
								"tag": "description",
								"text": "实现Flat<T>扁平化元组类型。 - 清晰明了"
							},
							{
								"tag": "example",
								"text": "type A = Flat<[1,2,3]> // [1,2,3]"
							},
							{
								"tag": "example",
								"text": "type B = Flat<[1,[2,3], [4,[5,[6]]]]> // [1,2,3,4,5,6]"
							},
							{
								"tag": "example",
								"text": "type C = Flat<[]> // []\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Flat.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 106,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 107,
							"name": "AT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 106,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "inferred",
									"name": "L"
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"name": "L"
							},
							"extendsType": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"trueType": {
								"type": "tuple",
								"elements": [
									{
										"type": "rest",
										"elementType": {
											"type": "reference",
											"id": 105,
											"typeArguments": [
												{
													"type": "reference",
													"name": "L"
												}
											],
											"name": "Flat"
										}
									},
									{
										"type": "rest",
										"elementType": {
											"type": "reference",
											"id": 105,
											"typeArguments": [
												{
													"type": "reference",
													"name": "R"
												}
											],
											"name": "Flat"
										}
									}
								]
							},
							"falseType": {
								"type": "tuple",
								"elements": [
									{
										"type": "reference",
										"name": "L"
									},
									{
										"type": "rest",
										"elementType": {
											"type": "reference",
											"id": 105,
											"typeArguments": [
												{
													"type": "reference",
													"name": "R"
												}
											],
											"name": "Flat"
										}
									}
								]
							}
						},
						"falseType": {
							"type": "reference",
							"id": 107,
							"name": "AT"
						}
					}
				},
				{
					"id": 108,
					"name": "Flat1",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Flat1"
							},
							{
								"tag": "description",
								"text": "实现Flat1<T>扁平化元组类型。 - 简单"
							},
							{
								"tag": "example",
								"text": "type A = Flat1<[1,2,3]> // [1,2,3]"
							},
							{
								"tag": "example",
								"text": "type B = Flat1<[1,[2,3], [4,[5,[6]]]]> // [1,2,3,4,5,6]"
							},
							{
								"tag": "example",
								"text": "type C = Flat1<[]> // []\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Flat.ts",
							"line": 19,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 109,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 110,
							"name": "AT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 109,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "inferred",
									"name": "L"
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "tuple",
							"elements": [
								{
									"type": "rest",
									"elementType": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"name": "L"
										},
										"extendsType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										"trueType": {
											"type": "reference",
											"id": 105,
											"typeArguments": [
												{
													"type": "reference",
													"name": "L"
												}
											],
											"name": "Flat"
										},
										"falseType": {
											"type": "tuple",
											"elements": [
												{
													"type": "reference",
													"name": "L"
												}
											]
										}
									}
								},
								{
									"type": "rest",
									"elementType": {
										"type": "reference",
										"id": 105,
										"typeArguments": [
											{
												"type": "reference",
												"name": "R"
											}
										],
										"name": "Flat"
									}
								}
							]
						},
						"falseType": {
							"type": "reference",
							"id": 110,
							"name": "AT"
						}
					}
				},
				{
					"id": 124,
					"name": "FlatTupleToString",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "FlatTupleToString"
							},
							{
								"tag": "description",
								"text": "string[]元组类型转string"
							},
							{
								"tag": "example",
								"text": "type A = FlatTupleToString<['a', 'b']> // 'ab'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/RepeatString.ts",
							"line": 6,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 125,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						},
						{
							"id": 126,
							"name": "Return",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"default": {
								"type": "literal",
								"value": ""
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 125,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "template-literal",
									"head": "",
									"tail": [
										[
											{
												"type": "inferred",
												"name": "L"
											},
											""
										]
									]
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "reference",
							"id": 124,
							"typeArguments": [
								{
									"type": "reference",
									"name": "R"
								},
								{
									"type": "template-literal",
									"head": "",
									"tail": [
										[
											{
												"type": "reference",
												"name": "L"
											},
											""
										],
										[
											{
												"type": "reference",
												"id": 126,
												"name": "Return"
											},
											""
										]
									]
								}
							],
							"name": "FlatTupleToString"
						},
						"falseType": {
							"type": "reference",
							"id": 126,
							"name": "Return"
						}
					}
				},
				{
					"id": 116,
					"name": "IsAny",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "IsAny"
							},
							{
								"tag": "description",
								"text": "判断是否是any - 自己写的"
							},
							{
								"tag": "example",
								"text": "type A = IsAny<string> // false"
							},
							{
								"tag": "example",
								"text": "type B = IsAny<any> // true"
							},
							{
								"tag": "example",
								"text": "type C = IsAny<unknown> // false"
							},
							{
								"tag": "example",
								"text": "type D = IsAny<never> // false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/IsAny.ts",
							"line": 9,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 118,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "intrinsic",
									"name": "number"
								},
								{
									"type": "intrinsic",
									"name": "symbol"
								}
							]
						},
						"extendsType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"id": 118,
								"name": "T"
							}
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "reflection",
								"declaration": {
									"id": 117,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "types/IsAny.ts",
											"line": 10,
											"character": 6
										}
									]
								}
							},
							"extendsType": {
								"type": "reference",
								"id": 118,
								"name": "T"
							},
							"trueType": {
								"type": "literal",
								"value": true
							},
							"falseType": {
								"type": "literal",
								"value": false
							}
						},
						"falseType": {
							"type": "literal",
							"value": false
						}
					}
				},
				{
					"id": 119,
					"name": "IsAny1",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "IsAny1"
							},
							{
								"tag": "description",
								"text": "判断是否是any - 看答案的"
							},
							{
								"tag": "example",
								"text": "type A = IsAny1<string> // false"
							},
							{
								"tag": "example",
								"text": "type B = IsAny1<any> // true"
							},
							{
								"tag": "example",
								"text": "type C = IsAny1<unknown> // false"
							},
							{
								"tag": "example",
								"text": "type D = IsAny1<never> // false\n> 0-extends-1不满足类型约束（0不可以分配给1），因此也不可能被（0-extends-(1&T)）满足，因为1&T应该比T更窄。\n> any几乎可以匹配所有的其他类型，唯一不匹配的类型是：any-never\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/IsAny.ts",
							"line": 24,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 120,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "literal",
							"value": 0
						},
						"extendsType": {
							"type": "intersection",
							"types": [
								{
									"type": "literal",
									"value": 1
								},
								{
									"type": "reference",
									"id": 120,
									"name": "T"
								}
							]
						},
						"trueType": {
							"type": "literal",
							"value": true
						},
						"falseType": {
							"type": "literal",
							"value": false
						}
					}
				},
				{
					"id": 111,
					"name": "IsEmptyType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "IsEmptyType"
							},
							{
								"tag": "description",
								"text": "Implement IsEmptyType<T> to check if T is empty type {}.\n### Example ###\n```Typescript\ntype A = IsEmptyType<string> // false\ntype B = IsEmptyType<{ a: 3 }> // false\ntype C = IsEmptyType<{}> // true\ntype D = IsEmptyType<any> // false\ntype E = IsEmptyType<object> // false\ntype F = IsEmptyType<Object> // false\ntype G = IsEmptyType<unknown> // false\ntype H = IsEmptyType<{ number: 3 }> // false\n```\n> 注意string['number']这个情况，即在keyof-T上有numbsr\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/IsEmptyType.ts",
							"line": 17,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 113,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "intrinsic",
							"name": "number"
						},
						"extendsType": {
							"type": "reference",
							"id": 113,
							"name": "T"
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"id": 113,
									"name": "T"
								}
							},
							"extendsType": {
								"type": "intrinsic",
								"name": "never"
							},
							"trueType": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"id": 113,
									"name": "T"
								},
								"extendsType": {
									"type": "reflection",
									"declaration": {
										"id": 112,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"sources": [
											{
												"fileName": "types/IsEmptyType.ts",
												"line": 21,
												"character": 20
											}
										]
									}
								},
								"trueType": {
									"type": "literal",
									"value": true
								},
								"falseType": {
									"type": "literal",
									"value": false
								}
							},
							"falseType": {
								"type": "literal",
								"value": false
							}
						},
						"falseType": {
							"type": "literal",
							"value": false
						}
					}
				},
				{
					"id": 163,
					"name": "IsFractional",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 35,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 164,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "reference",
										"id": 164,
										"name": "T"
									},
									""
								]
							]
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "intrinsic",
										"name": "string"
									},
									"."
								],
								[
									{
										"type": "intrinsic",
										"name": "string"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "literal",
							"value": true
						},
						"falseType": {
							"type": "literal",
							"value": false
						}
					}
				},
				{
					"id": 161,
					"name": "IsNegative",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 34,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 162,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "reference",
										"id": 162,
										"name": "T"
									},
									""
								]
							]
						},
						"extendsType": {
							"type": "template-literal",
							"head": "-",
							"tail": [
								[
									{
										"type": "intrinsic",
										"name": "string"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "literal",
							"value": true
						},
						"falseType": {
							"type": "literal",
							"value": false
						}
					}
				},
				{
					"id": 88,
					"name": "IsNever",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "IsNever"
							},
							{
								"tag": "description",
								"text": "请实现IsNever<T>用以判断T是否是never。"
							},
							{
								"tag": "example",
								"text": "type A = IsNever<never> // true"
							},
							{
								"tag": "example",
								"text": "type B = IsNever<string> // false"
							},
							{
								"tag": "example",
								"text": "type C = IsNever<undefined> // false\n> 通常，分配性是期望的行为。extends为避免这种行为，您可以用方括号将关键字的每一侧括起来。\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/IsNever.ts",
							"line": 9,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 89,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "tuple",
							"elements": [
								{
									"type": "reference",
									"id": 89,
									"name": "T"
								}
							]
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "intrinsic",
									"name": "never"
								}
							]
						},
						"trueType": {
							"type": "literal",
							"value": true
						},
						"falseType": {
							"type": "literal",
							"value": false
						}
					}
				},
				{
					"id": 299,
					"name": "IsObject",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "判定是否对象类型"
					},
					"sources": [
						{
							"fileName": "types/IsObject.ts",
							"line": 4,
							"character": 13
						}
					],
					"typeParameter": [
						{
							"id": 300,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "tuple",
							"elements": [
								{
									"type": "reference",
									"id": 300,
									"name": "T"
								}
							]
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "intrinsic",
									"name": "object"
								}
							]
						},
						"trueType": {
							"type": "literal",
							"value": true
						},
						"falseType": {
							"type": "literal",
							"value": false
						}
					}
				},
				{
					"id": 189,
					"name": "IsStringArray",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 82,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 190,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 190,
							"name": "T"
						},
						"extendsType": {
							"type": "array",
							"elementType": {
								"type": "inferred",
								"name": "I"
							}
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"name": "I"
							},
							"extendsType": {
								"type": "intrinsic",
								"name": "string"
							},
							"trueType": {
								"type": "reference",
								"id": 190,
								"name": "T"
							},
							"falseType": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 250,
					"name": "LTrim",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "LTrim"
							},
							{
								"tag": "description",
								"text": "String.prototype.trimStart"
							},
							{
								"tag": "example",
								"text": "type A = LTrim<'    xxx  '> // 'xxx  '\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Trim.ts",
							"line": 6,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 251,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 251,
							"name": "T"
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "inferred",
										"name": "L"
									},
									""
								],
								[
									{
										"type": "inferred",
										"name": "R"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "tuple",
								"elements": [
									{
										"type": "reference",
										"name": "L"
									}
								]
							},
							"extendsType": {
								"type": "tuple",
								"elements": [
									{
										"type": "literal",
										"value": " "
									}
								]
							},
							"trueType": {
								"type": "reference",
								"id": 250,
								"typeArguments": [
									{
										"type": "reference",
										"name": "R"
									}
								],
								"name": "LTrim"
							},
							"falseType": {
								"type": "reference",
								"id": 251,
								"name": "T"
							}
						},
						"falseType": {
							"type": "reference",
							"id": 251,
							"name": "T"
						}
					}
				},
				{
					"id": 145,
					"name": "LargerThan",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "LargerThan"
							},
							{
								"tag": "description",
								"text": "不考虑负数和小数的 LargerThan"
							},
							{
								"tag": "example",
								"text": "type A = LargerThan<0, 1> // false"
							},
							{
								"tag": "example",
								"text": "type B = LargerThan<1, 0> // true"
							},
							{
								"tag": "example",
								"text": "type C = LargerThan<10, 9> // true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 9,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 146,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 147,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 148,
							"name": "TT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 148,
								"name": "TT"
							}
						},
						"extendsType": {
							"type": "reference",
							"id": 146,
							"name": "A"
						},
						"trueType": {
							"type": "literal",
							"value": false
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "length"
								},
								"objectType": {
									"type": "reference",
									"id": 148,
									"name": "TT"
								}
							},
							"extendsType": {
								"type": "reference",
								"id": 147,
								"name": "B"
							},
							"trueType": {
								"type": "literal",
								"value": true
							},
							"falseType": {
								"type": "reference",
								"id": 145,
								"typeArguments": [
									{
										"type": "reference",
										"id": 146,
										"name": "A"
									},
									{
										"type": "reference",
										"id": 147,
										"name": "B"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "rest",
												"elementType": {
													"type": "reference",
													"id": 148,
													"name": "TT"
												}
											},
											{
												"type": "literal",
												"value": 1
											}
										]
									}
								],
								"name": "LargerThan"
							}
						}
					}
				},
				{
					"id": 208,
					"name": "LargerThan1",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "LargerThan1"
							},
							{
								"tag": "description",
								"text": "判断number大于铁定是要带上小数和负数咯\n"
							},
							{
								"tag": "example",
								"text": "type A = LargerThan1<0, 1> // false"
							},
							{
								"tag": "example",
								"text": "type B = LargerThan1<1, 0> // true"
							},
							{
								"tag": "example",
								"text": "type C = LargerThan1<10, 9> // true"
							},
							{
								"tag": "example",
								"text": "type D = LargerThan1<10, 9.3> // true\n"
							},
							{
								"tag": "example",
								"text": "type D1 = LargerThan1<9999999999.3, 99999999999.2>"
							},
							{
								"tag": "example",
								"text": "type D2 = LargerThan1<-10, 9.3>"
							},
							{
								"tag": "example",
								"text": "type D3 = LargerThan1<-9.34, -9.32>"
							},
							{
								"tag": "example",
								"text": "type D4 = LargerThan1<9.33, 9.323>"
							},
							{
								"tag": "example",
								"text": "type D5 = LargerThan1<-9.33232435455, -9.312838435934953>"
							},
							{
								"tag": "example",
								"text": "type D6 = LargerThan1<-9.33213123123, -9.32>\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 130,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 209,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 210,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 211,
							"name": "AO",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 154,
								"typeArguments": [
									{
										"type": "reference",
										"id": 149,
										"name": "NSymbol"
									},
									{
										"type": "tuple"
									},
									{
										"type": "tuple"
									}
								],
								"name": "NumberObject"
							},
							"default": {
								"type": "reference",
								"id": 176,
								"typeArguments": [
									{
										"type": "reference",
										"id": 209,
										"name": "A"
									}
								],
								"name": "CreateNumberObject"
							}
						},
						{
							"id": 212,
							"name": "BO",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 154,
								"typeArguments": [
									{
										"type": "reference",
										"id": 149,
										"name": "NSymbol"
									},
									{
										"type": "tuple"
									},
									{
										"type": "tuple"
									}
								],
								"name": "NumberObject"
							},
							"default": {
								"type": "reference",
								"id": 176,
								"typeArguments": [
									{
										"type": "reference",
										"id": 210,
										"name": "B"
									}
								],
								"name": "CreateNumberObject"
							}
						},
						{
							"id": 213,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "reference",
								"id": 200,
								"typeArguments": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "symbol"
										},
										"objectType": {
											"type": "reference",
											"id": 211,
											"name": "AO"
										}
									},
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "symbol"
										},
										"objectType": {
											"type": "reference",
											"id": 212,
											"name": "BO"
										}
									}
								],
								"name": "SymbolCompare"
							}
						},
						{
							"id": 214,
							"name": "I",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "reference",
								"id": 203,
								"typeArguments": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "integer"
										},
										"objectType": {
											"type": "reference",
											"id": 211,
											"name": "AO"
										}
									},
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "integer"
										},
										"objectType": {
											"type": "reference",
											"id": 212,
											"name": "BO"
										}
									},
									{
										"type": "literal",
										"value": true
									}
								],
								"name": "NumberArrayCompare"
							}
						},
						{
							"id": 215,
							"name": "F",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "reference",
								"id": 203,
								"typeArguments": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "fractional"
										},
										"objectType": {
											"type": "reference",
											"id": 211,
											"name": "AO"
										}
									},
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "fractional"
										},
										"objectType": {
											"type": "reference",
											"id": 212,
											"name": "BO"
										}
									},
									{
										"type": "literal",
										"value": false
									}
								],
								"name": "NumberArrayCompare"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 213,
							"name": "S"
						},
						"extendsType": {
							"type": "reference",
							"id": 152,
							"name": "Res.Failure"
						},
						"trueType": {
							"type": "literal",
							"value": false
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 213,
								"name": "S"
							},
							"extendsType": {
								"type": "reference",
								"id": 151,
								"name": "Res.Victory"
							},
							"trueType": {
								"type": "literal",
								"value": true
							},
							"falseType": {
								"type": "conditional",
								"checkType": {
									"type": "indexedAccess",
									"indexType": {
										"type": "literal",
										"value": "symbol"
									},
									"objectType": {
										"type": "reference",
										"id": 211,
										"name": "AO"
									}
								},
								"extendsType": {
									"type": "literal",
									"value": 1
								},
								"trueType": {
									"type": "conditional",
									"checkType": {
										"type": "reference",
										"id": 214,
										"name": "I"
									},
									"extendsType": {
										"type": "reference",
										"id": 152,
										"name": "Res.Failure"
									},
									"trueType": {
										"type": "literal",
										"value": true
									},
									"falseType": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 214,
											"name": "I"
										},
										"extendsType": {
											"type": "reference",
											"id": 151,
											"name": "Res.Victory"
										},
										"trueType": {
											"type": "literal",
											"value": false
										},
										"falseType": {
											"type": "conditional",
											"checkType": {
												"type": "reference",
												"id": 215,
												"name": "F"
											},
											"extendsType": {
												"type": "reference",
												"id": 152,
												"name": "Res.Failure"
											},
											"trueType": {
												"type": "literal",
												"value": true
											},
											"falseType": {
												"type": "literal",
												"value": false
											}
										}
									}
								},
								"falseType": {
									"type": "conditional",
									"checkType": {
										"type": "reference",
										"id": 214,
										"name": "I"
									},
									"extendsType": {
										"type": "reference",
										"id": 152,
										"name": "Res.Failure"
									},
									"trueType": {
										"type": "literal",
										"value": false
									},
									"falseType": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 214,
											"name": "I"
										},
										"extendsType": {
											"type": "reference",
											"id": 151,
											"name": "Res.Victory"
										},
										"trueType": {
											"type": "literal",
											"value": true
										},
										"falseType": {
											"type": "conditional",
											"checkType": {
												"type": "reference",
												"id": 215,
												"name": "F"
											},
											"extendsType": {
												"type": "reference",
												"id": 151,
												"name": "Res.Victory"
											},
											"trueType": {
												"type": "literal",
												"value": true
											},
											"falseType": {
												"type": "literal",
												"value": false
											}
										}
									}
								}
							}
						}
					}
				},
				{
					"id": 216,
					"name": "LargerThan2",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "LargerThan2"
							},
							{
								"tag": "description",
								"text": "A大于等于B"
							},
							{
								"tag": "example",
								"text": "type G1 = LargerThan<1, 2> // false"
							},
							{
								"tag": "example",
								"text": "type G2 = LargerThan<1, 1> // true"
							},
							{
								"tag": "example",
								"text": "type G3 = LargerThan<2, 1> // true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 166,
							"character": 13
						}
					],
					"typeParameter": [
						{
							"id": 217,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 218,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 219,
							"name": "TT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 219,
								"name": "TT"
							}
						},
						"extendsType": {
							"type": "reference",
							"id": 217,
							"name": "A"
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "length"
								},
								"objectType": {
									"type": "reference",
									"id": 219,
									"name": "TT"
								}
							},
							"extendsType": {
								"type": "reference",
								"id": 218,
								"name": "B"
							},
							"trueType": {
								"type": "literal",
								"value": true
							},
							"falseType": {
								"type": "literal",
								"value": false
							}
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "length"
								},
								"objectType": {
									"type": "reference",
									"id": 219,
									"name": "TT"
								}
							},
							"extendsType": {
								"type": "reference",
								"id": 218,
								"name": "B"
							},
							"trueType": {
								"type": "literal",
								"value": true
							},
							"falseType": {
								"type": "reference",
								"id": 216,
								"typeArguments": [
									{
										"type": "reference",
										"id": 217,
										"name": "A"
									},
									{
										"type": "reference",
										"id": 218,
										"name": "B"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "rest",
												"elementType": {
													"type": "reference",
													"id": 219,
													"name": "TT"
												}
											},
											{
												"type": "literal",
												"value": 1
											}
										]
									}
								],
								"name": "LargerThan2"
							}
						}
					}
				},
				{
					"id": 220,
					"name": "LargerThan3",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "LargerThan3"
							},
							{
								"tag": "description",
								"text": "A大于B"
							},
							{
								"tag": "example",
								"text": "type G1 = LargerThan3<1, 2> // false"
							},
							{
								"tag": "example",
								"text": "type G2 = LargerThan3<1, 1> // false"
							},
							{
								"tag": "example",
								"text": "type G3 = LargerThan3<2, 1> // true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 182,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 221,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 222,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 260,
							"typeArguments": [
								{
									"type": "reference",
									"id": 221,
									"name": "A"
								}
							],
							"name": "NumberToTuple"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "rest",
									"elementType": {
										"type": "reference",
										"id": 260,
										"typeArguments": [
											{
												"type": "reference",
												"id": 222,
												"name": "B"
											}
										],
										"name": "NumberToTuple"
									}
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "length"
								},
								"objectType": {
									"type": "reference",
									"name": "R"
								}
							},
							"extendsType": {
								"type": "literal",
								"value": 0
							},
							"trueType": {
								"type": "literal",
								"value": false
							},
							"falseType": {
								"type": "literal",
								"value": true
							}
						},
						"falseType": {
							"type": "literal",
							"value": false
						}
					}
				},
				{
					"id": 76,
					"name": "LastChar1",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LastChar.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 77,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 77,
							"name": "T"
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "inferred",
										"name": "L"
									},
									""
								],
								[
									{
										"type": "inferred",
										"name": "R"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"name": "R"
							},
							"extendsType": {
								"type": "literal",
								"value": ""
							},
							"trueType": {
								"type": "reference",
								"name": "L"
							},
							"falseType": {
								"type": "reference",
								"id": 76,
								"typeArguments": [
									{
										"type": "reference",
										"name": "R"
									}
								],
								"name": "LastChar1"
							}
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 78,
					"name": "LastChar2",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LastChar.ts",
							"line": 7,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 79,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 80,
							"name": "Right",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 79,
							"name": "T"
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "inferred",
										"name": "L"
									},
									""
								],
								[
									{
										"type": "inferred",
										"name": "R"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "reference",
							"id": 78,
							"typeArguments": [
								{
									"type": "reference",
									"name": "R"
								},
								{
									"type": "reference",
									"name": "L"
								}
							],
							"name": "LastChar2"
						},
						"falseType": {
							"type": "reference",
							"id": 80,
							"name": "Right"
						}
					}
				},
				{
					"id": 90,
					"name": "LastItem",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "LastItem"
							},
							{
								"tag": "description",
								"text": "和 FirstItem<T> 类似，实现 LastItem<T> 用以返回tuple的最后一个type。"
							},
							{
								"tag": "example",
								"text": "type A = LastItem<[string, number, boolean]> // boolean"
							},
							{
								"tag": "example",
								"text": "type B = LastItem<['B', 'F', 'E']> // 'E'"
							},
							{
								"tag": "example",
								"text": "type C = LastItem<[]> // never\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/LastItem.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 91,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 91,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "rest",
									"elementType": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"type": "inferred",
									"name": "R"
								}
							]
						},
						"trueType": {
							"type": "reference",
							"name": "R"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 97,
					"name": "LengthOfString",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "LengthOfString"
							},
							{
								"tag": "description",
								"text": "请实现LengthOfString<T>用以返回字符串长度。"
							},
							{
								"tag": "example",
								"text": "type A = LengthOfString<'BFE.dev'> // 7"
							},
							{
								"tag": "example",
								"text": "type B = LengthOfString<''> // 0\n> 通过string转array来实现\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/LengthOfString.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 98,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 99,
							"name": "AT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 98,
							"name": "T"
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "inferred",
										"name": "L"
									},
									""
								],
								[
									{
										"type": "inferred",
										"name": "R"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "reference",
							"id": 97,
							"typeArguments": [
								{
									"type": "reference",
									"name": "R"
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 99,
												"name": "AT"
											}
										},
										{
											"type": "reference",
											"name": "L"
										}
									]
								}
							],
							"name": "LengthOfString"
						},
						"falseType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 99,
								"name": "AT"
							}
						}
					}
				},
				{
					"id": 95,
					"name": "LengthOfTuple",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "LengthOfTuple"
							},
							{
								"tag": "description",
								"text": "请实现LengthOfTuple<T>返回tuple type的长度。"
							},
							{
								"tag": "example",
								"text": "type A = LengthOfTuple<['B', 'F', 'E']> // 3"
							},
							{
								"tag": "example",
								"text": "type B = LengthOfTuple<[]> // 0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/LengthOfTuple.ts",
							"line": 7,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 96,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "literal",
							"value": "length"
						},
						"extendsType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"id": 96,
								"name": "T"
							}
						},
						"trueType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 96,
								"name": "T"
							}
						},
						"falseType": {
							"type": "literal",
							"value": 0
						}
					}
				},
				{
					"id": 289,
					"name": "Multiply",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Multiply"
							},
							{
								"tag": "description",
								"text": "Implement Multiply<A, B> A * B, 正整数乘法"
							},
							{
								"tag": "example",
								"text": "type A = Multiply<1, 0> // 0"
							},
							{
								"tag": "example",
								"text": "type B = Multiply<4, 6> // 24\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Multiply.ts",
							"line": 14,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 290,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 291,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "literal",
							"value": 0
						},
						"extendsType": {
							"type": "reference",
							"id": 290,
							"name": "A"
						},
						"trueType": {
							"type": "literal",
							"value": 0
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "literal",
								"value": 0
							},
							"extendsType": {
								"type": "reference",
								"id": 291,
								"name": "B"
							},
							"trueType": {
								"type": "literal",
								"value": 0
							},
							"falseType": {
								"type": "reference",
								"id": 284,
								"typeArguments": [
									{
										"type": "reference",
										"id": 260,
										"typeArguments": [
											{
												"type": "reference",
												"id": 290,
												"name": "A"
											}
										],
										"name": "NumberToTuple"
									},
									{
										"type": "reference",
										"id": 260,
										"typeArguments": [
											{
												"type": "reference",
												"id": 291,
												"name": "B"
											}
										],
										"name": "NumberToTuple"
									}
								],
								"name": "MultiplyHelper"
							}
						}
					}
				},
				{
					"id": 284,
					"name": "MultiplyHelper",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/Multiply.ts",
							"line": 3,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 285,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 286,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 287,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						},
						{
							"id": 288,
							"name": "D",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 287,
								"name": "C"
							}
						},
						"extendsType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 285,
								"name": "A"
							}
						},
						"trueType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 288,
								"name": "D"
							}
						},
						"falseType": {
							"type": "reference",
							"id": 284,
							"typeArguments": [
								{
									"type": "reference",
									"id": 285,
									"name": "A"
								},
								{
									"type": "reference",
									"id": 286,
									"name": "B"
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 287,
												"name": "C"
											}
										},
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 288,
												"name": "D"
											}
										},
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 286,
												"name": "B"
											}
										}
									]
								}
							],
							"name": "MultiplyHelper"
						}
					}
				},
				{
					"id": 36,
					"name": "MyConstructorParameters",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyConstructorParameters.ts",
							"line": 2,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 43,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 40,
									"name": "__type",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"sources": [
										{
											"fileName": "types/MyConstructorParameters.ts",
											"line": 2,
											"character": 46
										}
									],
									"signatures": [
										{
											"id": 41,
											"name": "__type",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {
												"isAbstract": true
											},
											"parameters": [
												{
													"id": 42,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 43,
							"name": "T"
						},
						"extendsType": {
							"type": "reflection",
							"declaration": {
								"id": 37,
								"name": "__type",
								"kind": 512,
								"kindString": "Constructor",
								"flags": {},
								"sources": [
									{
										"fileName": "types/MyConstructorParameters.ts",
										"line": 2,
										"character": 94
									}
								],
								"signatures": [
									{
										"id": 38,
										"name": "__type",
										"kind": 16384,
										"kindString": "Constructor signature",
										"flags": {
											"isAbstract": true
										},
										"parameters": [
											{
												"id": 39,
												"name": "args",
												"kind": 32768,
												"kindString": "Parameter",
												"flags": {
													"isRest": true
												},
												"type": {
													"type": "inferred",
													"name": "P"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								]
							}
						},
						"trueType": {
							"type": "reference",
							"name": "P"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 20,
					"name": "MyExclude",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyExclude.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 21,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 22,
							"name": "K",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 21,
							"name": "T"
						},
						"extendsType": {
							"type": "reference",
							"id": 22,
							"name": "K"
						},
						"trueType": {
							"type": "intrinsic",
							"name": "never"
						},
						"falseType": {
							"type": "reference",
							"id": 21,
							"name": "T"
						}
					}
				},
				{
					"id": 23,
					"name": "MyExtract",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyExtract.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 24,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 25,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 24,
							"name": "T"
						},
						"extendsType": {
							"type": "reference",
							"id": 25,
							"name": "U"
						},
						"trueType": {
							"type": "reference",
							"id": 24,
							"name": "T"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 52,
					"name": "MyInstanceType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "description",
								"text": "构造函数返回的是类的实例，具体可参考 new 的实现\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/MyInstanceType.ts",
							"line": 4,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 59,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 56,
									"name": "__type",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"sources": [
										{
											"fileName": "types/MyInstanceType.ts",
											"line": 4,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 57,
											"name": "__type",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {
												"isAbstract": true
											},
											"parameters": [
												{
													"id": 58,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 59,
							"name": "T"
						},
						"extendsType": {
							"type": "reflection",
							"declaration": {
								"id": 53,
								"name": "__type",
								"kind": 512,
								"kindString": "Constructor",
								"flags": {},
								"sources": [
									{
										"fileName": "types/MyInstanceType.ts",
										"line": 4,
										"character": 85
									}
								],
								"signatures": [
									{
										"id": 54,
										"name": "__type",
										"kind": 16384,
										"kindString": "Constructor signature",
										"flags": {
											"isAbstract": true
										},
										"parameters": [
											{
												"id": 55,
												"name": "args",
												"kind": 32768,
												"kindString": "Parameter",
												"flags": {
													"isRest": true
												},
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"type": {
											"type": "inferred",
											"name": "P"
										}
									}
								]
							}
						},
						"trueType": {
							"type": "reference",
							"name": "P"
						},
						"falseType": {
							"type": "reference",
							"id": 59,
							"name": "T"
						}
					}
				},
				{
					"id": 26,
					"name": "MyNonNullable",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyNonNullable.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 27,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 27,
							"name": "T"
						},
						"extendsType": {
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": null
								},
								{
									"type": "intrinsic",
									"name": "undefined"
								}
							]
						},
						"trueType": {
							"type": "intrinsic",
							"name": "never"
						},
						"falseType": {
							"type": "reference",
							"id": 27,
							"name": "T"
						}
					}
				},
				{
					"id": 17,
					"name": "MyOmit",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyOmit.ts",
							"line": 3,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 18,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 19,
							"name": "K",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "P",
						"parameterType": {
							"type": "reference",
							"id": 20,
							"typeArguments": [
								{
									"type": "typeOperator",
									"operator": "keyof",
									"target": {
										"type": "reference",
										"id": 18,
										"name": "T"
									}
								},
								{
									"type": "reference",
									"id": 19,
									"name": "K"
								}
							],
							"name": "MyExclude"
						},
						"templateType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "reference",
								"name": "P"
							},
							"objectType": {
								"type": "reference",
								"id": 18,
								"name": "T"
							}
						}
					}
				},
				{
					"id": 66,
					"name": "MyOmitThisParameter",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyOmitThisParameter.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 73,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "intrinsic",
							"name": "unknown"
						},
						"extendsType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 73,
									"name": "T"
								}
							],
							"qualifiedName": "ThisParameterType",
							"package": ".pnpm",
							"name": "ThisParameterType"
						},
						"trueType": {
							"type": "reference",
							"id": 73,
							"name": "T"
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 73,
								"name": "T"
							},
							"extendsType": {
								"type": "reflection",
								"declaration": {
									"id": 67,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "types/MyOmitThisParameter.ts",
											"line": 7,
											"character": 20
										}
									],
									"signatures": [
										{
											"id": 68,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 69,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "inferred",
														"name": "P"
													}
												}
											],
											"type": {
												"type": "inferred",
												"name": "R"
											}
										}
									]
								}
							},
							"trueType": {
								"type": "reflection",
								"declaration": {
									"id": 70,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "types/MyOmitThisParameter.ts",
											"line": 8,
											"character": 14
										}
									],
									"signatures": [
										{
											"id": 71,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 72,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "reference",
														"name": "P"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "R"
											}
										}
									]
								}
							},
							"falseType": {
								"type": "reference",
								"id": 73,
								"name": "T"
							}
						}
					}
				},
				{
					"id": 28,
					"name": "MyParameters",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyParameters.ts",
							"line": 2,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 35,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 32,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "types/MyParameters.ts",
											"line": 2,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 33,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 34,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 35,
							"name": "T"
						},
						"extendsType": {
							"type": "reflection",
							"declaration": {
								"id": 29,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"sources": [
									{
										"fileName": "types/MyParameters.ts",
										"line": 2,
										"character": 70
									}
								],
								"signatures": [
									{
										"id": 30,
										"name": "__type",
										"kind": 4096,
										"kindString": "Call signature",
										"flags": {},
										"parameters": [
											{
												"id": 31,
												"name": "args",
												"kind": 32768,
												"kindString": "Parameter",
												"flags": {
													"isRest": true
												},
												"type": {
													"type": "inferred",
													"name": "U"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								]
							}
						},
						"trueType": {
							"type": "reference",
							"name": "U"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 5,
					"name": "MyPartial",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyPartial.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 6,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "P",
						"parameterType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"id": 6,
								"name": "T"
							}
						},
						"templateType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "reference",
								"name": "P"
							},
							"objectType": {
								"type": "reference",
								"id": 6,
								"name": "T"
							}
						},
						"optionalModifier": "+"
					}
				},
				{
					"id": 14,
					"name": "MyPick",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyPick.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 15,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 16,
							"name": "K",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"id": 15,
									"name": "T"
								}
							}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "P",
						"parameterType": {
							"type": "reference",
							"id": 16,
							"name": "K"
						},
						"templateType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "reference",
								"name": "P"
							},
							"objectType": {
								"type": "reference",
								"id": 15,
								"name": "T"
							}
						}
					}
				},
				{
					"id": 9,
					"name": "MyReadonly",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyReadonly.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 10,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "P",
						"parameterType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"id": 10,
								"name": "T"
							}
						},
						"templateType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "reference",
								"name": "P"
							},
							"objectType": {
								"type": "reference",
								"id": 10,
								"name": "T"
							}
						},
						"readonlyModifier": "+"
					}
				},
				{
					"id": 11,
					"name": "MyRecord",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyRecord.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 12,
							"name": "K",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						},
						{
							"id": 13,
							"name": "V",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "P",
						"parameterType": {
							"type": "reference",
							"id": 12,
							"name": "K"
						},
						"templateType": {
							"type": "reference",
							"id": 13,
							"name": "V"
						}
					}
				},
				{
					"id": 7,
					"name": "MyRequired",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "description",
								"text": "映射类型 「+」 「-」 用来影响 「readonly」 和 「?」 属性 {只读、可变}\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/MyRequired.ts",
							"line": 4,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 8,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "P",
						"parameterType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"id": 8,
								"name": "T"
							}
						},
						"templateType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "reference",
								"name": "P"
							},
							"objectType": {
								"type": "reference",
								"id": 8,
								"name": "T"
							}
						},
						"optionalModifier": "-"
					}
				},
				{
					"id": 44,
					"name": "MyReturnType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/ReturnType.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 51,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 48,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "types/ReturnType.ts",
											"line": 1,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 49,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 50,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 51,
							"name": "T"
						},
						"extendsType": {
							"type": "reflection",
							"declaration": {
								"id": 45,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"sources": [
									{
										"fileName": "types/ReturnType.ts",
										"line": 1,
										"character": 70
									}
								],
								"signatures": [
									{
										"id": 46,
										"name": "__type",
										"kind": 4096,
										"kindString": "Call signature",
										"flags": {},
										"parameters": [
											{
												"id": 47,
												"name": "args",
												"kind": 32768,
												"kindString": "Parameter",
												"flags": {
													"isRest": true
												},
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"type": {
											"type": "inferred",
											"name": "P"
										}
									}
								]
							}
						},
						"trueType": {
							"type": "reference",
							"name": "P"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 60,
					"name": "MyThisParameterType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/MyThisParameterType.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 65,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 65,
							"name": "T"
						},
						"extendsType": {
							"type": "reflection",
							"declaration": {
								"id": 61,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"sources": [
									{
										"fileName": "types/MyThisParameterType.ts",
										"line": 1,
										"character": 47
									}
								],
								"signatures": [
									{
										"id": 62,
										"name": "__type",
										"kind": 4096,
										"kindString": "Call signature",
										"flags": {},
										"parameters": [
											{
												"id": 63,
												"name": "this",
												"kind": 32768,
												"kindString": "Parameter",
												"flags": {},
												"type": {
													"type": "inferred",
													"name": "P"
												}
											},
											{
												"id": 64,
												"name": "args",
												"kind": 32768,
												"kindString": "Parameter",
												"flags": {
													"isRest": true
												},
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								]
							}
						},
						"trueType": {
							"type": "reference",
							"name": "P"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "unknown"
						}
					}
				},
				{
					"id": 149,
					"name": "NSymbol",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 21,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 0
							},
							{
								"type": "literal",
								"value": 1
							}
						]
					}
				},
				{
					"id": 203,
					"name": "NumberArrayCompare",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 107,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 204,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 205,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 206,
							"name": "CL",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 207,
							"name": "LR",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "reference",
								"id": 180,
								"typeArguments": [
									{
										"type": "template-literal",
										"head": "",
										"tail": [
											[
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "length"
													},
													"objectType": {
														"type": "reference",
														"id": 204,
														"name": "A"
													}
												},
												""
											]
										]
									},
									{
										"type": "template-literal",
										"head": "",
										"tail": [
											[
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "length"
													},
													"objectType": {
														"type": "reference",
														"id": 205,
														"name": "B"
													}
												},
												""
											]
										]
									}
								],
								"name": "NumberCompare"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 206,
							"name": "CL"
						},
						"extendsType": {
							"type": "literal",
							"value": true
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 207,
								"name": "LR"
							},
							"extendsType": {
								"type": "reference",
								"id": 153,
								"name": "Res.Tie"
							},
							"trueType": {
								"type": "reference",
								"id": 191,
								"typeArguments": [
									{
										"type": "reference",
										"id": 204,
										"name": "A"
									},
									{
										"type": "reference",
										"id": 205,
										"name": "B"
									}
								],
								"name": "NumberArrayCompareHandler"
							},
							"falseType": {
								"type": "reference",
								"id": 207,
								"name": "LR"
							}
						},
						"falseType": {
							"type": "reference",
							"id": 191,
							"typeArguments": [
								{
									"type": "reference",
									"id": 204,
									"name": "A"
								},
								{
									"type": "reference",
									"id": 205,
									"name": "B"
								}
							],
							"name": "NumberArrayCompareHandler"
						}
					}
				},
				{
					"id": 191,
					"name": "NumberArrayCompareHandler",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 89,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 192,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 193,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 192,
								"name": "A"
							}
						},
						"extendsType": {
							"type": "literal",
							"value": 0
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "length"
								},
								"objectType": {
									"type": "reference",
									"id": 193,
									"name": "B"
								}
							},
							"extendsType": {
								"type": "literal",
								"value": 0
							},
							"trueType": {
								"type": "reference",
								"id": 153,
								"name": "Res.Tie"
							},
							"falseType": {
								"type": "reference",
								"id": 152,
								"name": "Res.Failure"
							}
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 180,
								"typeArguments": [
									{
										"type": "reference",
										"id": 185,
										"typeArguments": [
											{
												"type": "reference",
												"id": 192,
												"name": "A"
											}
										],
										"name": "Pop"
									},
									{
										"type": "reference",
										"id": 185,
										"typeArguments": [
											{
												"type": "reference",
												"id": 193,
												"name": "B"
											}
										],
										"name": "Pop"
									}
								],
								"name": "NumberCompare"
							},
							"extendsType": {
								"type": "reference",
								"id": 153,
								"name": "Res.Tie"
							},
							"trueType": {
								"type": "reference",
								"id": 191,
								"typeArguments": [
									{
										"type": "reference",
										"id": 189,
										"typeArguments": [
											{
												"type": "reference",
												"id": 187,
												"typeArguments": [
													{
														"type": "reference",
														"id": 192,
														"name": "A"
													}
												],
												"name": "ShiftString"
											}
										],
										"name": "IsStringArray"
									},
									{
										"type": "reference",
										"id": 189,
										"typeArguments": [
											{
												"type": "reference",
												"id": 187,
												"typeArguments": [
													{
														"type": "reference",
														"id": 193,
														"name": "B"
													}
												],
												"name": "ShiftString"
											}
										],
										"name": "IsStringArray"
									}
								],
								"name": "NumberArrayCompareHandler"
							},
							"falseType": {
								"type": "reference",
								"id": 180,
								"typeArguments": [
									{
										"type": "reference",
										"id": 185,
										"typeArguments": [
											{
												"type": "reference",
												"id": 192,
												"name": "A"
											}
										],
										"name": "Pop"
									},
									{
										"type": "reference",
										"id": 185,
										"typeArguments": [
											{
												"type": "reference",
												"id": 193,
												"name": "B"
											}
										],
										"name": "Pop"
									}
								],
								"name": "NumberCompare"
							}
						}
					}
				},
				{
					"id": 180,
					"name": "NumberCompare",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 70,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 181,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 182,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 183,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"default": {
								"type": "tuple"
							}
						},
						{
							"id": 184,
							"name": "L",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "template-literal",
								"head": "",
								"tail": [
									[
										{
											"type": "indexedAccess",
											"indexType": {
												"type": "literal",
												"value": "length"
											},
											"objectType": {
												"type": "reference",
												"id": 183,
												"name": "T"
											}
										},
										""
									]
								]
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 184,
							"name": "L"
						},
						"extendsType": {
							"type": "reference",
							"id": 181,
							"name": "A"
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 184,
								"name": "L"
							},
							"extendsType": {
								"type": "reference",
								"id": 182,
								"name": "B"
							},
							"trueType": {
								"type": "reference",
								"id": 153,
								"name": "Res.Tie"
							},
							"falseType": {
								"type": "reference",
								"id": 152,
								"name": "Res.Failure"
							}
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 184,
								"name": "L"
							},
							"extendsType": {
								"type": "reference",
								"id": 182,
								"name": "B"
							},
							"trueType": {
								"type": "reference",
								"id": 151,
								"name": "Res.Victory"
							},
							"falseType": {
								"type": "reference",
								"id": 180,
								"typeArguments": [
									{
										"type": "reference",
										"id": 181,
										"name": "A"
									},
									{
										"type": "reference",
										"id": 182,
										"name": "B"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "rest",
												"elementType": {
													"type": "reference",
													"id": 183,
													"name": "T"
												}
											},
											{
												"type": "literal",
												"value": "_"
											}
										]
									}
								],
								"name": "NumberCompare"
							}
						}
					}
				},
				{
					"id": 172,
					"name": "NumberObjectByN",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 54,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 173,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "reference",
										"id": 173,
										"name": "T"
									},
									""
								]
							]
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "inferred",
										"name": "_"
									},
									""
								],
								[
									{
										"type": "inferred",
										"name": "I"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "reference",
							"id": 154,
							"typeArguments": [
								{
									"type": "literal",
									"value": 1
								},
								{
									"type": "reference",
									"id": 165,
									"typeArguments": [
										{
											"type": "reference",
											"name": "I"
										}
									],
									"name": "Split"
								},
								{
									"type": "tuple"
								}
							],
							"name": "NumberObject"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 168,
					"name": "NumberObjectByNF",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 45,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 169,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "reference",
										"id": 169,
										"name": "T"
									},
									""
								]
							]
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "inferred",
										"name": "_"
									},
									""
								],
								[
									{
										"type": "inferred",
										"name": "I"
									},
									"."
								],
								[
									{
										"type": "inferred",
										"name": "F"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "reference",
							"id": 154,
							"typeArguments": [
								{
									"type": "literal",
									"value": 1
								},
								{
									"type": "reference",
									"id": 165,
									"typeArguments": [
										{
											"type": "reference",
											"name": "I"
										}
									],
									"name": "Split"
								},
								{
									"type": "reference",
									"id": 165,
									"typeArguments": [
										{
											"type": "reference",
											"name": "F"
										}
									],
									"name": "Split"
								}
							],
							"name": "NumberObject"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 174,
					"name": "NumberObjectByP",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 59,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 175,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 154,
						"typeArguments": [
							{
								"type": "literal",
								"value": 0
							},
							{
								"type": "reference",
								"id": 165,
								"typeArguments": [
									{
										"type": "template-literal",
										"head": "",
										"tail": [
											[
												{
													"type": "reference",
													"id": 175,
													"name": "T"
												},
												""
											]
										]
									}
								],
								"name": "Split"
							},
							{
								"type": "tuple"
							}
						],
						"name": "NumberObject"
					}
				},
				{
					"id": 170,
					"name": "NumberObjectByPF",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 49,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 171,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "reference",
										"id": 171,
										"name": "T"
									},
									""
								]
							]
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "inferred",
										"name": "I"
									},
									"."
								],
								[
									{
										"type": "inferred",
										"name": "F"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "reference",
							"id": 154,
							"typeArguments": [
								{
									"type": "literal",
									"value": 0
								},
								{
									"type": "reference",
									"id": 165,
									"typeArguments": [
										{
											"type": "reference",
											"name": "I"
										}
									],
									"name": "Split"
								},
								{
									"type": "reference",
									"id": 165,
									"typeArguments": [
										{
											"type": "reference",
											"name": "F"
										}
									],
									"name": "Split"
								}
							],
							"name": "NumberObject"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 260,
					"name": "NumberToTuple",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "NumberToTuple"
							},
							{
								"tag": "descript",
								"text": "number 转 tuple类型"
							},
							{
								"tag": "example",
								"text": "type A = NumberToTuple<0> // []"
							},
							{
								"tag": "example",
								"text": "type A = NumberToTuple<1> // [any]"
							},
							{
								"tag": "example",
								"text": "type A = NumberToTuple<2> // [any, any]\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Slice.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 261,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"default": {
								"type": "literal",
								"value": 0
							}
						},
						{
							"id": 262,
							"name": "R",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 262,
								"name": "R"
							}
						},
						"extendsType": {
							"type": "reference",
							"id": 261,
							"name": "T"
						},
						"trueType": {
							"type": "reference",
							"id": 262,
							"name": "R"
						},
						"falseType": {
							"type": "reference",
							"id": 260,
							"typeArguments": [
								{
									"type": "reference",
									"id": 261,
									"name": "T"
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 262,
												"name": "R"
											}
										},
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							],
							"name": "NumberToTuple"
						}
					}
				},
				{
					"id": 226,
					"name": "NumberToTupleLength",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "NumberToTupleLength"
							},
							{
								"tag": "description",
								"text": "把正整数number转成一个any类型的元组"
							},
							{
								"tag": "example",
								"text": "type A = NumberToTupleLength<1> // [any]"
							},
							{
								"tag": "example",
								"text": "type B = NumberToTupleLength<2> // [any, any]"
							},
							{
								"tag": "example",
								"text": "type C = NumberToTupleLength<3> // [any, any, any]\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Add.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 227,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 228,
							"name": "TT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "tuple",
							"elements": [
								{
									"type": "reference",
									"id": 227,
									"name": "T"
								}
							]
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "literal",
										"value": "length"
									},
									"objectType": {
										"type": "reference",
										"id": 228,
										"name": "TT"
									}
								}
							]
						},
						"trueType": {
							"type": "reference",
							"id": 228,
							"name": "TT"
						},
						"falseType": {
							"type": "reference",
							"id": 226,
							"typeArguments": [
								{
									"type": "reference",
									"id": 227,
									"name": "T"
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 228,
												"name": "TT"
											}
										},
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							],
							"name": "NumberToTupleLength"
						}
					}
				},
				{
					"id": 185,
					"name": "Pop",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 79,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 186,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "literal",
							"value": 0
						},
						"objectType": {
							"type": "reference",
							"id": 186,
							"name": "T"
						}
					}
				},
				{
					"id": 121,
					"name": "Push",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Push"
							},
							{
								"tag": "description",
								"text": "实现Push<T, I>"
							},
							{
								"tag": "example",
								"text": "type A = Push<[1,2,3], 4> // [2,3]"
							},
							{
								"tag": "example",
								"text": "type B = Push<[1], 2> // [1, 2]"
							},
							{
								"tag": "example",
								"text": "type C = Push<[], string> // [string]\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Push.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 122,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 123,
							"name": "I",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 122,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "Rest"
									}
								}
							]
						},
						"trueType": {
							"type": "tuple",
							"elements": [
								{
									"type": "rest",
									"elementType": {
										"type": "reference",
										"name": "Rest"
									}
								},
								{
									"type": "reference",
									"id": 123,
									"name": "I"
								}
							]
						},
						"falseType": {
							"type": "reference",
							"id": 122,
							"name": "T"
						}
					}
				},
				{
					"id": 252,
					"name": "RTrim",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "RTrim"
							},
							{
								"tag": "description",
								"text": "String.prototype.trimEnd"
							},
							{
								"tag": "example",
								"text": "type A = LTrim<'    xxx  '> // '    xxx'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Trim.ts",
							"line": 18,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 253,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 253,
							"name": "T"
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "inferred",
										"name": "L"
									},
									""
								],
								[
									{
										"type": "inferred",
										"name": "R"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "conditional",
							"checkType": {
								"type": "tuple",
								"elements": [
									{
										"type": "reference",
										"name": "R"
									}
								]
							},
							"extendsType": {
								"type": "tuple",
								"elements": [
									{
										"type": "literal",
										"value": " "
									}
								]
							},
							"trueType": {
								"type": "reference",
								"name": "L"
							},
							"falseType": {
								"type": "conditional",
								"checkType": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"id": 252,
											"typeArguments": [
												{
													"type": "reference",
													"name": "R"
												}
											],
											"name": "RTrim"
										}
									]
								},
								"extendsType": {
									"type": "tuple",
									"elements": [
										{
											"type": "literal",
											"value": " "
										}
									]
								},
								"trueType": {
									"type": "reference",
									"name": "L"
								},
								"falseType": {
									"type": "template-literal",
									"head": "",
									"tail": [
										[
											{
												"type": "reference",
												"name": "L"
											},
											""
										],
										[
											{
												"type": "reference",
												"id": 252,
												"typeArguments": [
													{
														"type": "reference",
														"name": "R"
													}
												],
												"name": "RTrim"
											},
											""
										]
									]
								}
							}
						},
						"falseType": {
							"type": "reference",
							"id": 253,
							"name": "T"
						}
					}
				},
				{
					"id": 137,
					"name": "Repeat",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Repeat"
							},
							{
								"tag": "description",
								"text": "Implement Repeat<T, C> to return a tuple by repeating."
							},
							{
								"tag": "example",
								"text": "type A = Repeat<number, 3> // [number, number, number]"
							},
							{
								"tag": "example",
								"text": "type B = Repeat<string, 2> // [string, string]"
							},
							{
								"tag": "example",
								"text": "type C = Repeat<1, 1> // [1, 1]"
							},
							{
								"tag": "example",
								"text": "type D = Repeat<0, 0> // []\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Repeat.ts",
							"line": 9,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 138,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 139,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 140,
							"name": "AT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 138,
									"name": "T"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 139,
							"name": "C"
						},
						"extendsType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 140,
								"name": "AT"
							}
						},
						"trueType": {
							"type": "reference",
							"id": 140,
							"name": "AT"
						},
						"falseType": {
							"type": "reference",
							"id": 137,
							"typeArguments": [
								{
									"type": "reference",
									"id": 138,
									"name": "T"
								},
								{
									"type": "reference",
									"id": 139,
									"name": "C"
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 140,
												"name": "AT"
											}
										},
										{
											"type": "reference",
											"id": 138,
											"name": "T"
										}
									]
								}
							],
							"name": "Repeat"
						}
					}
				},
				{
					"id": 127,
					"name": "RepeatString",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "RepeatString"
							},
							{
								"tag": "description",
								"text": "类似于String.prototype.repeat()，请实现RepeatString<T, C>。"
							},
							{
								"tag": "example",
								"text": "type A = RepeatString<'a', 3> // 'aaa'"
							},
							{
								"tag": "example",
								"text": "type B = RepeatString<'a', 0> // ''"
							},
							{
								"tag": "example",
								"text": "type C = RepeatString<'abc', 0> // 'abcabcabc'\n> 看到了很多其他的思路，有先把string转换成tuple的，还有利用一个tuple去做递归不断的扩展length的，我看到了许多思想的迸发，That's-Good！\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/RepeatString.ts",
							"line": 18,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 128,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 129,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 130,
							"name": "R",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 128,
									"name": "T"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 129,
							"name": "C"
						},
						"extendsType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 130,
								"name": "R"
							}
						},
						"trueType": {
							"type": "reference",
							"id": 124,
							"typeArguments": [
								{
									"type": "reference",
									"id": 130,
									"name": "R"
								}
							],
							"name": "FlatTupleToString"
						},
						"falseType": {
							"type": "reference",
							"id": 127,
							"typeArguments": [
								{
									"type": "reference",
									"id": 128,
									"name": "T"
								},
								{
									"type": "reference",
									"id": 129,
									"name": "C"
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 130,
												"name": "R"
											}
										},
										{
											"type": "reference",
											"id": 128,
											"name": "T"
										}
									]
								}
							],
							"name": "RepeatString"
						}
					}
				},
				{
					"id": 131,
					"name": "RepeatString1",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "RepeatString1"
							},
							{
								"tag": "description",
								"text": "类似于String.prototype.repeat()，请实现RepeatString1<T, C>。"
							},
							{
								"tag": "example",
								"text": "type A = RepeatString1<'a', 3> // 'aaa'"
							},
							{
								"tag": "example",
								"text": "type B = RepeatString1<'a', 0> // ''"
							},
							{
								"tag": "example",
								"text": "type C = RepeatString1<'abc', 0> // 'abcabcabc'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/RepeatString.ts",
							"line": 29,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 132,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 133,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 134,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 134,
								"name": "A"
							}
						},
						"extendsType": {
							"type": "reference",
							"id": 133,
							"name": "C"
						},
						"trueType": {
							"type": "literal",
							"value": ""
						},
						"falseType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "reference",
										"id": 132,
										"name": "T"
									},
									""
								],
								[
									{
										"type": "reference",
										"id": 131,
										"typeArguments": [
											{
												"type": "reference",
												"id": 132,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 133,
												"name": "C"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "reference",
														"id": 132,
														"name": "T"
													},
													{
														"type": "rest",
														"elementType": {
															"type": "reference",
															"id": 134,
															"name": "A"
														}
													}
												]
											}
										],
										"name": "RepeatString1"
									},
									""
								]
							]
						}
					}
				},
				{
					"id": 256,
					"name": "ReplaceAll",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "ReplaceAll"
							},
							{
								"tag": "description",
								"text": "Just like String.prototype.replaceAll(),"
							},
							{
								"tag": "example",
								"text": "type A = ReplaceAll<'aba', 'b', ''> // 'aa'"
							},
							{
								"tag": "example",
								"text": "type B = ReplaceAll<'ababbab', 'b', ''> // 'aaa'"
							},
							{
								"tag": "example",
								"text": "type B = ReplaceAll<'ababbab', 'b', ''> // 'aaa'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/ReplaceAll.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 257,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 258,
							"name": "F",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 259,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 258,
							"name": "F"
						},
						"extendsType": {
							"type": "literal",
							"value": ""
						},
						"trueType": {
							"type": "reference",
							"id": 257,
							"name": "S"
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 257,
								"name": "S"
							},
							"extendsType": {
								"type": "template-literal",
								"head": "",
								"tail": [
									[
										{
											"type": "inferred",
											"name": "A"
										},
										""
									],
									[
										{
											"type": "reference",
											"id": 258,
											"name": "F"
										},
										""
									],
									[
										{
											"type": "inferred",
											"name": "B"
										},
										""
									]
								]
							},
							"trueType": {
								"type": "template-literal",
								"head": "",
								"tail": [
									[
										{
											"type": "reference",
											"name": "A"
										},
										""
									],
									[
										{
											"type": "reference",
											"id": 259,
											"name": "T"
										},
										""
									],
									[
										{
											"type": "reference",
											"id": 256,
											"typeArguments": [
												{
													"type": "reference",
													"name": "B"
												},
												{
													"type": "reference",
													"id": 258,
													"name": "F"
												},
												{
													"type": "reference",
													"id": 259,
													"name": "T"
												}
											],
											"name": "ReplaceAll"
										},
										""
									]
								]
							},
							"falseType": {
								"type": "reference",
								"id": 257,
								"name": "S"
							}
						}
					}
				},
				{
					"id": 102,
					"name": "ReverseTuple",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "ReverseTuple"
							},
							{
								"tag": "description",
								"text": "实现ReverseTuple<T>反转元组类型。"
							},
							{
								"tag": "example",
								"text": "type A = ReverseTuple<[string, number, boolean]> // [boolean, number, string]"
							},
							{
								"tag": "example",
								"text": "type B = ReverseTuple<[1,2,3]> // [3,2,1]"
							},
							{
								"tag": "example",
								"text": "type C = ReverseTuple<[]> // []\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/ReverseTuple.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 103,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 104,
							"name": "AT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 103,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "inferred",
									"name": "L"
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "reference",
							"id": 102,
							"typeArguments": [
								{
									"type": "reference",
									"name": "R"
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"name": "L"
										},
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 104,
												"name": "AT"
											}
										}
									]
								}
							],
							"name": "ReverseTuple"
						},
						"falseType": {
							"type": "reference",
							"id": 104,
							"name": "AT"
						}
					}
				},
				{
					"id": 114,
					"name": "Shift",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Shift"
							},
							{
								"tag": "description",
								"text": "请实现Shift<T>来去掉tuple的第一个元素"
							},
							{
								"tag": "example",
								"text": "type A = Shift<[1, 2, 3]> // [2, 3]"
							},
							{
								"tag": "example",
								"text": "type B = Shift<[1]> // []"
							},
							{
								"tag": "example",
								"text": "type C = Shift<[]> // []\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Shift.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 115,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 115,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "intrinsic",
									"name": "any"
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "Rest"
									}
								}
							]
						},
						"trueType": {
							"type": "reference",
							"name": "Rest"
						},
						"falseType": {
							"type": "tuple"
						}
					}
				},
				{
					"id": 187,
					"name": "ShiftString",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 80,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 188,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 188,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "inferred",
									"name": "_"
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "reference",
							"name": "R"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 263,
					"name": "Slice",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Slice"
							},
							{
								"tag": "description",
								"text": "Just like what Array.prototype.slice() does, please implement Slice<A, S, E>."
							},
							{
								"tag": "example",
								"text": "type A = Slice<[1,2,3,4], 0, 2> // [1, 2]"
							},
							{
								"tag": "example",
								"text": "type B = Slice<[1,2,3,4], 2> // [3, 4]"
							},
							{
								"tag": "example",
								"text": "type C = Slice<[number, boolean, bigint], 2, 5> // [bigint]"
							},
							{
								"tag": "example",
								"text": "type D = Slice<[string, boolean], 0, 1> // [string]"
							},
							{
								"tag": "example",
								"text": "type E = Slice<[number, boolean, bigint], 5, 6> // []\n> 可以使用LessThan来比较大小，由于索引都是大于等于0的整数，所以可以使用简版的LessThan\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Slice.ts",
							"line": 23,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 264,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 265,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"default": {
								"type": "literal",
								"value": 0
							}
						},
						{
							"id": 266,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"default": {
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "length"
								},
								"objectType": {
									"type": "reference",
									"id": 264,
									"name": "A"
								}
							}
						},
						{
							"id": 267,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						},
						{
							"id": 268,
							"name": "D",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						},
						{
							"id": 269,
							"name": "ST",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "reference",
								"id": 260,
								"typeArguments": [
									{
										"type": "reference",
										"id": 265,
										"name": "S"
									}
								],
								"name": "NumberToTuple"
							}
						},
						{
							"id": 270,
							"name": "ET",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "reference",
								"id": 260,
								"typeArguments": [
									{
										"type": "reference",
										"id": 266,
										"name": "E"
									}
								],
								"name": "NumberToTuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "tuple",
							"elements": [
								{
									"type": "literal",
									"value": 0
								}
							]
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "literal",
										"value": "length"
									},
									"objectType": {
										"type": "reference",
										"id": 264,
										"name": "A"
									}
								}
							]
						},
						"trueType": {
							"type": "reference",
							"id": 268,
							"name": "D"
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "tuple",
								"elements": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "length"
										},
										"objectType": {
											"type": "reference",
											"id": 269,
											"name": "ST"
										}
									}
								]
							},
							"extendsType": {
								"type": "tuple",
								"elements": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "length"
										},
										"objectType": {
											"type": "reference",
											"id": 267,
											"name": "C"
										}
									}
								]
							},
							"trueType": {
								"type": "conditional",
								"checkType": {
									"type": "tuple",
									"elements": [
										{
											"type": "indexedAccess",
											"indexType": {
												"type": "literal",
												"value": "length"
											},
											"objectType": {
												"type": "reference",
												"id": 270,
												"name": "ET"
											}
										}
									]
								},
								"extendsType": {
									"type": "tuple",
									"elements": [
										{
											"type": "indexedAccess",
											"indexType": {
												"type": "literal",
												"value": "length"
											},
											"objectType": {
												"type": "reference",
												"id": 267,
												"name": "C"
											}
										}
									]
								},
								"trueType": {
									"type": "reference",
									"id": 268,
									"name": "D"
								},
								"falseType": {
									"type": "conditional",
									"checkType": {
										"type": "reference",
										"id": 264,
										"name": "A"
									},
									"extendsType": {
										"type": "tuple",
										"elements": [
											{
												"type": "inferred",
												"name": "L"
											},
											{
												"type": "rest",
												"elementType": {
													"type": "inferred",
													"name": "R"
												}
											}
										]
									},
									"trueType": {
										"type": "reference",
										"id": 263,
										"typeArguments": [
											{
												"type": "reference",
												"name": "R"
											},
											{
												"type": "reference",
												"id": 265,
												"name": "S"
											},
											{
												"type": "reference",
												"id": 266,
												"name": "E"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "rest",
														"elementType": {
															"type": "reference",
															"id": 267,
															"name": "C"
														}
													},
													{
														"type": "literal",
														"value": 1
													}
												]
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "rest",
														"elementType": {
															"type": "reference",
															"id": 268,
															"name": "D"
														}
													},
													{
														"type": "reference",
														"name": "L"
													}
												]
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "rest",
														"elementType": {
															"type": "reference",
															"id": 267,
															"name": "C"
														}
													},
													{
														"type": "literal",
														"value": 1
													}
												]
											},
											{
												"type": "reference",
												"id": 270,
												"name": "ET"
											}
										],
										"name": "Slice"
									},
									"falseType": {
										"type": "reference",
										"id": 268,
										"name": "D"
									}
								}
							},
							"falseType": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"id": 264,
									"name": "A"
								},
								"extendsType": {
									"type": "tuple",
									"elements": [
										{
											"type": "inferred",
											"name": "L"
										},
										{
											"type": "rest",
											"elementType": {
												"type": "inferred",
												"name": "R"
											}
										}
									]
								},
								"trueType": {
									"type": "reference",
									"id": 263,
									"typeArguments": [
										{
											"type": "reference",
											"name": "R"
										},
										{
											"type": "reference",
											"id": 265,
											"name": "S"
										},
										{
											"type": "reference",
											"id": 266,
											"name": "E"
										},
										{
											"type": "tuple",
											"elements": [
												{
													"type": "rest",
													"elementType": {
														"type": "reference",
														"id": 267,
														"name": "C"
													}
												},
												{
													"type": "literal",
													"value": 1
												}
											]
										},
										{
											"type": "reference",
											"id": 268,
											"name": "D"
										},
										{
											"type": "reference",
											"id": 269,
											"name": "ST"
										},
										{
											"type": "reference",
											"id": 270,
											"name": "ET"
										}
									],
									"name": "Slice"
								},
								"falseType": {
									"type": "reference",
									"id": 268,
									"name": "D"
								}
							}
						}
					}
				},
				{
					"id": 223,
					"name": "SmallerThan",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "SmallerThan"
							},
							{
								"tag": "description",
								"text": "实现小于，「A和B是大于等于0的整数」"
							},
							{
								"tag": "example",
								"text": "type A = SmallerThan<0, 1> // true"
							},
							{
								"tag": "example",
								"text": "type B = SmallerThan<1, 0> // false"
							},
							{
								"tag": "example",
								"text": "type C = SmallerThan<10, 9> // false"
							},
							{
								"tag": "example",
								"text": "type D = SmallerThan<0, 0> // false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/SmallerThan.ts",
							"line": 10,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 224,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 225,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 260,
							"typeArguments": [
								{
									"type": "reference",
									"id": 224,
									"name": "A"
								}
							],
							"name": "NumberToTuple"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "rest",
									"elementType": {
										"type": "reference",
										"id": 260,
										"typeArguments": [
											{
												"type": "reference",
												"id": 225,
												"name": "B"
											}
										],
										"name": "NumberToTuple"
									}
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "literal",
							"value": false
						},
						"falseType": {
							"type": "literal",
							"value": true
						}
					}
				},
				{
					"id": 165,
					"name": "Split",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 37,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 166,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 167,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 166,
							"name": "T"
						},
						"extendsType": {
							"type": "literal",
							"value": ""
						},
						"trueType": {
							"type": "reference",
							"id": 167,
							"name": "P"
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 166,
								"name": "T"
							},
							"extendsType": {
								"type": "template-literal",
								"head": "",
								"tail": [
									[
										{
											"type": "inferred",
											"name": "F"
										},
										""
									],
									[
										{
											"type": "inferred",
											"name": "R"
										},
										""
									]
								]
							},
							"trueType": {
								"type": "reference",
								"id": 165,
								"typeArguments": [
									{
										"type": "reference",
										"name": "R"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "rest",
												"elementType": {
													"type": "reference",
													"id": 167,
													"name": "P"
												}
											},
											{
												"type": "reference",
												"name": "F"
											}
										]
									}
								],
								"name": "Split"
							},
							"falseType": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					}
				},
				{
					"id": 92,
					"name": "StringToTuple",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "StringToTuple"
							},
							{
								"tag": "description",
								"text": "请实现StringToTuple<T>将字符串拆散为tuple。"
							},
							{
								"tag": "example",
								"text": "type A = StringToTuple<'BFE.dev'> // ['B', 'F', 'E', '.', 'd', 'e','v']"
							},
							{
								"tag": "example",
								"text": "type B = StringToTuple<''> // []\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/StringToTuple.ts",
							"line": 7,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 93,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 94,
							"name": "Tuple",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 93,
							"name": "T"
						},
						"extendsType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "inferred",
										"name": "L"
									},
									""
								],
								[
									{
										"type": "inferred",
										"name": "R"
									},
									""
								]
							]
						},
						"trueType": {
							"type": "reference",
							"id": 92,
							"typeArguments": [
								{
									"type": "reference",
									"name": "R"
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 94,
												"name": "Tuple"
											}
										},
										{
											"type": "reference",
											"name": "L"
										}
									]
								}
							],
							"name": "StringToTuple"
						},
						"falseType": {
							"type": "reference",
							"id": 94,
							"name": "Tuple"
						}
					}
				},
				{
					"id": 275,
					"name": "Subtract",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Subtract"
							},
							{
								"tag": "description",
								"text": "Similar to 38. implement Add<A, B>, please implement Subtract<A, B>."
							},
							{
								"tag": "description",
								"text": "1.only need to consider positive integers"
							},
							{
								"tag": "description",
								"text": "2.B is guaranteed to be smaller or equal to A"
							},
							{
								"tag": "example",
								"text": "type A = Subtract<1, 1> // 0"
							},
							{
								"tag": "example",
								"text": "type B = Subtract<10, 3> // 7"
							},
							{
								"tag": "example",
								"text": "type C = Subtract<3, 10> // never\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Subtract.ts",
							"line": 21,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 276,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 277,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 216,
							"typeArguments": [
								{
									"type": "reference",
									"id": 276,
									"name": "A"
								},
								{
									"type": "reference",
									"id": 277,
									"name": "B"
								}
							],
							"name": "LargerThan2"
						},
						"extendsType": {
							"type": "literal",
							"value": false
						},
						"trueType": {
							"type": "intrinsic",
							"name": "never"
						},
						"falseType": {
							"type": "reference",
							"id": 271,
							"typeArguments": [
								{
									"type": "reference",
									"id": 260,
									"typeArguments": [
										{
											"type": "reference",
											"id": 276,
											"name": "A"
										}
									],
									"name": "NumberToTuple"
								},
								{
									"type": "reference",
									"id": 260,
									"typeArguments": [
										{
											"type": "reference",
											"id": 277,
											"name": "B"
										}
									],
									"name": "NumberToTuple"
								}
							],
							"name": "SubtractHelper"
						}
					}
				},
				{
					"id": 281,
					"name": "Subtract1",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Subtract1"
							},
							{
								"tag": "description",
								"text": "Similar to 38. implement Add<A, B>, please implement Subtract1<A, B>."
							},
							{
								"tag": "description",
								"text": "1.only need to consider positive integers"
							},
							{
								"tag": "description",
								"text": "2.B is guaranteed to be smaller or equal to A"
							},
							{
								"tag": "example",
								"text": "type A = Subtract1<1, 1> // 0"
							},
							{
								"tag": "example",
								"text": "type B = Subtract1<10, 3> // 7"
							},
							{
								"tag": "example",
								"text": "type C = Subtract1<3, 10> // never\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Subtract.ts",
							"line": 49,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 282,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 283,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 216,
							"typeArguments": [
								{
									"type": "reference",
									"id": 282,
									"name": "A"
								},
								{
									"type": "reference",
									"id": 283,
									"name": "B"
								}
							],
							"name": "LargerThan2"
						},
						"extendsType": {
							"type": "literal",
							"value": false
						},
						"trueType": {
							"type": "intrinsic",
							"name": "never"
						},
						"falseType": {
							"type": "reference",
							"id": 278,
							"typeArguments": [
								{
									"type": "reference",
									"id": 282,
									"name": "A"
								},
								{
									"type": "reference",
									"id": 283,
									"name": "B"
								}
							],
							"name": "SubtractHelper1"
						}
					}
				},
				{
					"id": 271,
					"name": "SubtractHelper",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "SubtractHelper"
							},
							{
								"tag": "description",
								"text": "用来帮助计算 Subtract，前提条件：A.length肯定大于B.length\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Subtract.ts",
							"line": 7,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 272,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 273,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 274,
							"name": "R",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 273,
								"name": "B"
							}
						},
						"extendsType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 272,
								"name": "A"
							}
						},
						"trueType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 274,
								"name": "R"
							}
						},
						"falseType": {
							"type": "reference",
							"id": 271,
							"typeArguments": [
								{
									"type": "reference",
									"id": 272,
									"name": "A"
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 273,
												"name": "B"
											}
										},
										{
											"type": "literal",
											"value": 1
										}
									]
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 274,
												"name": "R"
											}
										},
										{
											"type": "literal",
											"value": 1
										}
									]
								}
							],
							"name": "SubtractHelper"
						}
					}
				},
				{
					"id": 278,
					"name": "SubtractHelper1",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "SubtractHelper"
							},
							{
								"tag": "description",
								"text": "用来帮助计算 Subtract1，前提条件：A肯定大于B\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Subtract.ts",
							"line": 35,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 279,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 280,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 260,
							"typeArguments": [
								{
									"type": "reference",
									"id": 279,
									"name": "A"
								}
							],
							"name": "NumberToTuple"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "rest",
									"elementType": {
										"type": "reference",
										"id": 260,
										"typeArguments": [
											{
												"type": "reference",
												"id": 280,
												"name": "B"
											}
										],
										"name": "NumberToTuple"
									}
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"name": "R"
							}
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 200,
					"name": "SymbolCompare",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 105,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 201,
							"name": "A",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": 0
									},
									{
										"type": "literal",
										"value": 1
									}
								]
							}
						},
						{
							"id": 202,
							"name": "B",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": 0
									},
									{
										"type": "literal",
										"value": 1
									}
								]
							}
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "reference",
										"id": 201,
										"name": "A"
									},
									""
								],
								[
									{
										"type": "reference",
										"id": 202,
										"name": "B"
									},
									""
								]
							]
						},
						"objectType": {
							"type": "reference",
							"id": 194,
							"name": "SymbolCompareResMap"
						}
					}
				},
				{
					"id": 194,
					"name": "SymbolCompareResMap",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types/LargerThan.ts",
							"line": 99,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 195,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 196,
									"name": "00",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types/LargerThan.ts",
											"line": 100,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 153,
										"name": "Res.Tie"
									}
								},
								{
									"id": 198,
									"name": "01",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types/LargerThan.ts",
											"line": 102,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 151,
										"name": "Res.Victory"
									}
								},
								{
									"id": 199,
									"name": "10",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types/LargerThan.ts",
											"line": 103,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 152,
										"name": "Res.Failure"
									}
								},
								{
									"id": 197,
									"name": "11",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types/LargerThan.ts",
											"line": 101,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 153,
										"name": "Res.Tie"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										196,
										198,
										199,
										197
									]
								}
							],
							"sources": [
								{
									"fileName": "types/LargerThan.ts",
									"line": 99,
									"character": 34
								}
							]
						}
					}
				},
				{
					"id": 232,
					"name": "ToNumber",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "ToNumber"
							},
							{
								"tag": "description",
								"text": "string 转换为 number"
							},
							{
								"tag": "example",
								"text": "type A = ToNumber<'1'> // 1"
							},
							{
								"tag": "example",
								"text": "type B = ToNumber<'40'> // 40"
							},
							{
								"tag": "example",
								"text": "type C = ToNumber<'0'> // 0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/ToNumber.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 233,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 234,
							"name": "TT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"default": {
								"type": "tuple"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "length"
										},
										"objectType": {
											"type": "reference",
											"id": 234,
											"name": "TT"
										}
									},
									""
								]
							]
						},
						"extendsType": {
							"type": "reference",
							"id": 233,
							"name": "T"
						},
						"trueType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "length"
							},
							"objectType": {
								"type": "reference",
								"id": 234,
								"name": "TT"
							}
						},
						"falseType": {
							"type": "reference",
							"id": 232,
							"typeArguments": [
								{
									"type": "reference",
									"id": 233,
									"name": "T"
								},
								{
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "reference",
												"id": 234,
												"name": "TT"
											}
										},
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							],
							"name": "ToNumber"
						}
					}
				},
				{
					"id": 254,
					"name": "Trim",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "Trim"
							},
							{
								"tag": "description",
								"text": "正如String.prototype.trim()，请实现Trim<T>。"
							},
							{
								"tag": "example",
								"text": "type A = Trim<'    BFE.dev'> // 'BFE'"
							},
							{
								"tag": "example",
								"text": "type B = Trim<' BFE. dev  '> // 'BFE. dev'"
							},
							{
								"tag": "example",
								"text": "type C = Trim<'  BFE .   dev  '> // 'BFE .   dev'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/Trim.ts",
							"line": 34,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 255,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 250,
						"typeArguments": [
							{
								"type": "reference",
								"id": 252,
								"typeArguments": [
									{
										"type": "reference",
										"id": 255,
										"name": "T"
									}
								],
								"name": "RTrim"
							}
						],
						"name": "LTrim"
					}
				},
				{
					"id": 135,
					"name": "TupleToString",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "TupleToString"
							},
							{
								"tag": "description",
								"text": "TupleToString<T>通过将所有字符串连接到新的字符串类型来实现返回新类型。"
							},
							{
								"tag": "example",
								"text": "type A = TupleToString<['a']> // 'a'"
							},
							{
								"tag": "example",
								"text": "type B = TupleToString<['B', 'F', 'E']> // 'BFE'"
							},
							{
								"tag": "example",
								"text": "type C = TupleToString<[]> // ''\n> 类型收窄要常用extends+条件判断语句\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/TupleToString.ts",
							"line": 9,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 136,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 136,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "inferred",
									"name": "L"
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "template-literal",
							"head": "",
							"tail": [
								[
									{
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"name": "L"
										},
										"extendsType": {
											"type": "intrinsic",
											"name": "string"
										},
										"trueType": {
											"type": "reference",
											"name": "L"
										},
										"falseType": {
											"type": "literal",
											"value": ""
										}
									},
									""
								],
								[
									{
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"name": "R"
										},
										"extendsType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										"trueType": {
											"type": "reference",
											"id": 135,
											"typeArguments": [
												{
													"type": "reference",
													"name": "R"
												}
											],
											"name": "TupleToString"
										},
										"falseType": {
											"type": "literal",
											"value": ""
										}
									},
									""
								]
							]
						},
						"falseType": {
							"type": "literal",
							"value": ""
						}
					}
				},
				{
					"id": 81,
					"name": "TupleToUnion",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "description",
								"text": "R | P 是作为联合类型返回的，通过递归进行联合"
							},
							{
								"tag": "description",
								"text": "T extends [infer P, ...infer Q] 而不是反过来的\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/TupleToUnion.ts",
							"line": 5,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 82,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 83,
							"name": "R",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": 0
								},
								"objectType": {
									"type": "reference",
									"id": 82,
									"name": "T"
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 82,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "inferred",
									"name": "P"
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "Q"
									}
								}
							]
						},
						"trueType": {
							"type": "reference",
							"id": 81,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Q"
								},
								{
									"type": "union",
									"types": [
										{
											"type": "reference",
											"id": 83,
											"name": "R"
										},
										{
											"type": "reference",
											"name": "P"
										}
									]
								}
							],
							"name": "TupleToUnion"
						},
						"falseType": {
							"type": "reference",
							"id": 83,
							"name": "R"
						}
					}
				},
				{
					"id": 84,
					"name": "TupleToUnion1",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "description",
								"text": "元组/数组 直接通过[number]访问，可以得到内部的类型\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/TupleToUnion.ts",
							"line": 10,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 85,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 85,
							"name": "T"
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "R"
									}
								}
							]
						},
						"trueType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "intrinsic",
								"name": "number"
							},
							"objectType": {
								"type": "reference",
								"name": "R"
							}
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 301,
					"name": "TypeTransferValues",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "接受一个object type，返回一个values\n如果不是object，则返回原值"
					},
					"sources": [
						{
							"fileName": "types/TypeTransferValues.ts",
							"line": 5,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 302,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "tuple",
							"elements": [
								{
									"type": "reference",
									"id": 302,
									"name": "T"
								}
							]
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "intrinsic",
									"name": "object"
								}
							]
						},
						"trueType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"id": 302,
									"name": "T"
								}
							},
							"objectType": {
								"type": "mapped",
								"parameter": "P",
								"parameterType": {
									"type": "typeOperator",
									"operator": "keyof",
									"target": {
										"type": "reference",
										"id": 302,
										"name": "T"
									}
								},
								"templateType": {
									"type": "indexedAccess",
									"indexType": {
										"type": "reference",
										"name": "P"
									},
									"objectType": {
										"type": "reference",
										"id": 302,
										"name": "T"
									}
								},
								"readonlyModifier": "+"
							}
						},
						"falseType": {
							"type": "reference",
							"id": 302,
							"name": "T"
						}
					}
				},
				{
					"id": 235,
					"name": "UnionToIntersection",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "UnionToIntersection"
							},
							{
								"tag": "description",
								"text": "请实现UnionToIntersection<T>用以从Union得到Intersection。"
							},
							{
								"tag": "example",
								"text": "type A = UnionToIntersection<{a: string} | {b: string} | {c: string}> // {a: string} & {b: string} & {c: string}"
							},
							{
								"tag": "url",
								"text": "https://fettblog.eu/typescript-union-to-intersection/\n> 不知道什么是逆变位置，为什么放到条件类型中，TS就会有装包和解包的操作\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/UnionToIntersection.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 242,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"id": 242,
								"name": "T"
							},
							"extendsType": {
								"type": "intrinsic",
								"name": "any"
							},
							"trueType": {
								"type": "reflection",
								"declaration": {
									"id": 236,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "types/UnionToIntersection.ts",
											"line": 9,
											"character": 21
										}
									],
									"signatures": [
										{
											"id": 237,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 238,
													"name": "x",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 242,
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							},
							"falseType": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						"extendsType": {
							"type": "reflection",
							"declaration": {
								"id": 239,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"sources": [
									{
										"fileName": "types/UnionToIntersection.ts",
										"line": 10,
										"character": 4
									}
								],
								"signatures": [
									{
										"id": 240,
										"name": "__type",
										"kind": 4096,
										"kindString": "Call signature",
										"flags": {},
										"parameters": [
											{
												"id": 241,
												"name": "x",
												"kind": 32768,
												"kindString": "Parameter",
												"flags": {},
												"type": {
													"type": "inferred",
													"name": "R"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								]
							}
						},
						"trueType": {
							"type": "reference",
							"name": "R"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 100,
					"name": "UnwrapPromise",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "name",
								"text": "UnwrapPromise"
							},
							{
								"tag": "description",
								"text": "实现UnwrapPromise<T>以返回已解决的承诺类型。"
							},
							{
								"tag": "example",
								"text": "type A = UnwrapPromise<Promise<string>> // string"
							},
							{
								"tag": "example",
								"text": "type B = UnwrapPromise<Promise<null>> // null"
							},
							{
								"tag": "example",
								"text": "type C = UnwrapPromise<null> // Error\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types/UnwrapPromise.ts",
							"line": 8,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 101,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"qualifiedName": "Promise",
								"package": ".pnpm",
								"name": "Promise"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 101,
							"name": "T"
						},
						"extendsType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "inferred",
									"name": "P"
								}
							],
							"qualifiedName": "Promise",
							"package": ".pnpm",
							"name": "Promise"
						},
						"trueType": {
							"type": "reference",
							"name": "P"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 8,
					"children": [
						150
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						154
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						229,
						176,
						296,
						292,
						247,
						141,
						243,
						74,
						86,
						105,
						108,
						124,
						116,
						119,
						111,
						163,
						161,
						88,
						299,
						189,
						250,
						145,
						208,
						216,
						220,
						76,
						78,
						90,
						97,
						95,
						289,
						284,
						36,
						20,
						23,
						52,
						26,
						17,
						66,
						28,
						5,
						14,
						9,
						11,
						7,
						44,
						60,
						149,
						203,
						191,
						180,
						172,
						168,
						174,
						170,
						260,
						226,
						185,
						121,
						252,
						137,
						127,
						131,
						256,
						102,
						114,
						187,
						263,
						223,
						165,
						92,
						275,
						281,
						271,
						278,
						200,
						194,
						232,
						254,
						135,
						81,
						84,
						301,
						235,
						100
					]
				}
			],
			"sources": [
				{
					"fileName": "types/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2,
			"name": "utils",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 3,
					"name": "example",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "### 这是utils示例"
					},
					"sources": [
						{
							"fileName": "utils/index.ts",
							"line": 4,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "'example'"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						3
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/index.ts",
					"line": 4,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 2,
			"children": [
				4,
				1,
				2
			]
		}
	]
}